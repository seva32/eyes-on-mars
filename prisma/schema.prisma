generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model favorite_photo {
  id       Int     @id(map: "PK_c849a0ba75580d1029042c4d212") @default(autoincrement())
  photoUrl String  @db.VarChar
  rover    String? @db.VarChar
  camera   String? @db.VarChar
  sol      Int?
  rating   Int?
  userId   Int
  user     user    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_4b24235810b4c6500571a657dc1")
}

model profile {
  id        Int     @id(map: "PK_3dd8bfc97e4a77c70971591bdcb") @default(autoincrement())
  avatarUrl String? @db.VarChar
  bio       String?
  planet    String?
  user      user[]
}

model user {
  id             Int              @id(map: "PK_cace4a159ff9f2512dd42373760") @default(autoincrement())
  username       String           @unique(map: "UQ_78a916df40e02a9deb1c4b75edb") @db.VarChar
  email          String?          @unique(map: "UQ_e12875dfb3b1d92d7d7c5377e22") @db.VarChar
  password       String?          @db.VarChar
  oauthProvider  String?          @db.VarChar
  oauthId        String?          @db.VarChar
  createdAt      DateTime         @default(now()) @db.Timestamp(6)
  updatedAt      DateTime         @default(now()) @db.Timestamp(6)
  profileId      Int?
  favorite_photo favorite_photo[]
  profile        profile?         @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_9466682df91534dd95e4dbaa616")
}
